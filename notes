TODO:
	Makefile
	open input files
	validate input
	parse input
	set up mlx
	projections
DOING:
	drawing a line
		dda
DONE:
----

man /usr/share/man/man3/mlx.1
man /usr/share/man/man3/mlx_new_window.1
man /usr/share/man/man3/mlx_pixel_put.1
man /usr/share/man/man3/mlx_new_image.1
man /usr/share/man/man3/mlx_loop.1

#include <mlx.h>

mlx_new_window      : manage windows
	void	*mlx_new_window ( void *mlx_ptr, int size_x, int size_y, char *title );
	int		mlx_clear_window ( void *mlx_ptr, void *win_ptr );
	int		mlx_destroy_window ( void *mlx_ptr, void *win_ptr );
mlx_pixel_put       : draw inside window
	int		mlx_pixel_put ( void *mlx_ptr, void *win_ptr, int x, int y, int color );
	int		mlx_string_put ( void *mlx_ptr, void *win_ptr, int x, int y, int color, char *string );
mlx_new_image       : manipulate images
	void	*mlx_new_image ( void *mlx_ptr, int width, int height );
	char	*mlx_get_data_addr ( void *img_ptr, int *bits_per_pixel, int *size_line, int *endian );
	int		mlx_put_image_to_window ( void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y );
	unsigned int	mlx_get_color_value ( void *mlx_ptr, int color );
	void	*mlx_xpm_to_image ( void *mlx_ptr, char **xpm_data, int *width, int *height );
	void	*mlx_xpm_file_to_image ( void *mlx_ptr, char *filename, int *width, int *height );
	int		mlx_destroy_image ( void *mlx_ptr, void *img_ptr );
mlx_loop            : handle keyboard or mouse events
	int		mlx_loop ( void *mlx_ptr );
	int		mlx_key_hook ( void *win_ptr, int (*funct_ptr)(), void *param );
	int		mlx_mouse_hook ( void *win_ptr, int (*funct_ptr)(), void *param );
	int		mlx_expose_hook ( void *win_ptr, int (*funct_ptr)(), void *param );
	int		mlx_loop_hook ( void *mlx_ptr, int (*funct_ptr)(), void *param );

// on Linux/X-Window
-lmlx -lXext -lX11

// On MacOS
-lmlx -framework OpenGL -framework AppKit


cc -I /usr/local/include main.c -L /usr/local/lib/ -lmlx -framework OpenGL -framework AppKit
Bresenham's line algorithm'
	https://fi.wikipedia.org/wiki/Bresenhamin_algoritmi
	https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm


y = ((y1 - y0) / (x1 - x0)) * (x - x0) + y0
slope = (y1 - y0) / (x1 - x0)

- https://en.wikipedia.org/wiki/Digital_differential_analyzer_(graphics_algorithm)
	xi = xi − 1 + 1, yi = yi − 1 + m

- Isometrisen projection matikka:
    2d_x = (3d_x - 3d_z) * cos(30)
    2d_z = -3d_y + (3d_x + 3d_z) * sin(30)
- https://www.khanacademy.org/computing/computer-programming/programming-games-visualizations/programming-3d-shapes/a/rotating-3d-shapes


◦ open, read, write, close
◦ malloc, free
◦ perror, strerror
◦ exit
◦ All the functions defined in the math library (-lm and man 3 math)
◦ All the functions defined in the miniLibX library.

	// $(CC) -o $@ $(CFLAGS) $(OBJ) $(LIBA)